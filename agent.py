import random, math, json
from cab_environment import Agent, Environment
from cab_route_planner import RoutePlanner
from cab_simulator import Simulator

Q = dict()

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor


        # Set any additional class parameters as needed
        self.gamma = 0           # Gamma discount factor
        self.prev_state = None   # Previous state of smart cab
        self.prev_action = None  # Previous action taken by smart cab
        self.prev_reward = None  # Previous reward for smart cab
        self.def_Q = 0          # Default Q value to initialize the Q table
        self.n_trial = 0;


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        self.n_trial = self.n_trial + 1

        if testing == True: #resetting to empty if testing
            self.alpha = 0
            self.epsilon = 0
        else:
            #self.epsilon = self.epsilon - 0.05 # Old Epsilon Decay
            #self.epsilon = self.alpha ** self.n_trial # Decaying Epsilon 
            #self.epsilon = .95 ** self.n_trial # Decaying Epsilon 
            #self.epsilon = self.epsilon * .98
            #self.epsilon = (200 - 1.05**self.n_trial)
            self.epsilon = 1 - 0.99 * math.e ** ( -math.e ** (-0.03 *(self.n_trial - 150))) #final decay function
            
        self.gamma = 0           # Discount factor
        self.prev_state = None   # State the agent was in previously
        self.prev_action = None  # Previous action taken by the agent
        self.prev_reward = None  # Previous reward awarded to the agent

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ###########
        # Set 'state' as a tuple of relevant data for the agent
        # When learning, check if the state is in the Q-table
        #   If it is not, create a dictionary in the Q-table for the current 'state'
        #   For each action, set the Q-value for the state-action pair to 0

        inputs["waypoint"] = waypoint #adding waypoint to inputs
        del inputs['right'] #important for right forward
        self.state = inputs #assigning self
        state = tuple(inputs.values()) #setting up state structure
        return state


    def get_maxQ(self, state):
        """ The get_maxQ function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """


        # Calculate the maximum Q-value of all actions for a given state
        maxQ_action = None
        maxQ_value = 0

        if state in self.Q: #Check that the state is in the dictionary
            maxQ_action = max(self.Q[state]) #find max Q
            for actions in self.valid_actions: #iterate through valid actions
                if maxQ_value < self.Q[state][actions]: #cycle through q values
                    maxQ_value = self.Q[state][actions]
            
        print "MAX_Q: " + str(maxQ_value)
        return maxQ_value


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        if (self.learning):  #function only useful when learning
            if state not in self.Q: #to make sure not to repeat states
                self.Q[state] = {} #each state is its own dictionary
                for action in self.valid_actions: #iterate through valid actions
                    self.Q[state][action] = self.def_Q #assign
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        # When not learning, choose a random action
        if ( not self.learning ): 
            action = random.choice(self.valid_actions)

        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        else:
            if ( random.random() < self.epsilon ):
                action = random.choice(self.valid_actions)
            else:
                #Choose a random action wich has a Q value equal to maxQ 
                maxQ = self.get_maxQ(state)
 
                ###best_actions = [act for act in self.Q[state] if self.Q[state][act] == maxQ] ###This should work but doesn't
                #I ended up needing a fully written for loop
        
                best_actions = [] #will be list of best actions
                for act in self.Q[state]: #iterate through actions in state
                    if self.Q[state][act] == maxQ: #find action with max Q value in that state
                        best_actions.append(act) #add to list of best actions
                if (len(best_actions) > 0): #check if more than one best action
                    action = random.choice(best_actions) #if more than one best action, choose a random one
                else: 
                    action = best_actions[0] #if only one best action, use it

        print "Action taken: " + str(action)
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        next_state = self.build_state()
        self.createQ(next_state)

        if (self.learning):
        #    self.Q[state][action] = (1-self.alpha) * self.Q[state][action] + (self.alpha) * ( reward  + self.get_maxQ(next_state))
            self.Q[state][action] = (1-self.alpha) * self.Q[state][action] + (self.alpha) * reward
        return

    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, alpha = 0.05, epsilon = 1.0)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay = 0.0001, log_metrics = True, display = True,  optimized = True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0S
    sim.run(tolerance = 0.015, n_test = 20)
    #toleracne = 0.0005, alpha = 0.5, epsilon 1, decay *= 95 = 104 Trials




if __name__ == '__main__':
    run()
plot_trials('sim_improved-learning.csv')


